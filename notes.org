* Memory map
** Initial stacks set in bootstrap.S
    // Set initial stacks, 2^16 = 64KB stack per mode
    msr CPSR_c, #(CPSR_MODE_USR | CPSR_INTERRUPTS_DISABLED)
    ldr sp, =0x07fffff0
    msr CPSR_c, #(CPSR_MODE_FIQ | CPSR_INTERRUPTS_DISABLED)
    ldr sp, =0x07fefff0
    msr CPSR_c, #(CPSR_MODE_IRQ | CPSR_INTERRUPTS_DISABLED)
    ldr sp, =0x07fdfff0
    msr CPSR_c, #(CPSR_MODE_SVC | CPSR_INTERRUPTS_DISABLED)
    ldr sp, =0x07fcfff0
    // Skip CPSR_MODE_MON, as we won't be using secure extensions.
    msr CPSR_c, #(CPSR_MODE_ABT | CPSR_INTERRUPTS_DISABLED)
    ldr sp, =0x07fbfff0
    // Skip CPSR_MODE_HYP, as we won't be using virtualisation extensions.
    msr CPSR_c, #(CPSR_MODE_UND | CPSR_INTERRUPTS_DISABLED)
    ldr sp, =0x07fafff0
    // Skip CPSR_MODE_SYS, which has same sp as USR mode.
** u-boot currently loads image to 0x10000, with entry point at 0x10000
** The heap is in a statically-defined array in .bss, which is bounded by linker symbols __bss_start__ and __bss_end__
** kspawned threads have their stacks allocated in the heap

** TODO: Add more detail to this. Including:
*** Peripheral blocks
*** Link to SoC memory map
*** End of RAM
*** Current heap symbol names
*** Exception vector
*** End of image symbol?

* ARM Registers
  r0-r1 (arguments, scratch, return values)
  r2-r3 (arguments, scratch)
  r4-r10
  r11 aka fp (frame pointer, prev stack frame?)
  r12 aka ip (intra-procedure-call scratch register)
  r13 aka sp (stack pointer)
  r14 aka lr (link register, call return address)
  r15 aka pc (program counter)

  In supervisor mode all registers are as user mode except for r13 (sp), r14 (lr). SPSR is available, reflects CPSR before switching to supervisor mode.
  In system mode SPSR is not available, all variables are the same as in user mode, CPSR is writable.


* ARM documentation links
** CPU
*** ARM and Thumb instruction reference:
    http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0489e/Cihedhif.html
*** ARM1176JZF-S Technical Reference Manual:
    http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.ddi0301h/index.html
*** CPU interrupt vector:
   http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.ddi0211h/Babfeega.html
** Board documentation:
   http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0224i/Chdbeibh.html
*** Board primary interrupt controller with interrupts list:
    http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0224i/I1042232.html
*** Interrupt controllers on the board
    http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0224i/Cacgfedh.html
** Peripherals
*** ARM Dual-Timer Module (SP804) manual:
   http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.ddi0271d/index.html
*** PrimeCell Vectored Interrupt Controller (PL190) manual:
   http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.ddi0181e/index.html
*** PrimeCell UART (PL011) manual:
   http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.ddi0183g/index.html
*** PrimeCell DMA controller (PL080) manual:
   http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.ddi0196g/index.html
*** PrimeCell Real Time Clock (PL031) Technical Reference Manual
   http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.ddi0224b/index.html

** JavaScript snippet to convert ARM reference register table to #define list:
   Array.from(t.rows).slice(1).forEach(r => {
     let name = r.cells[0].textContent;
     let offsetBytes = parseInt(r.cells[1].textContent.substring(2), 16);
     console.log(
       "#define " + name + " 0x" + (offsetBytes/4).toString(16) +
       "     // 0x" + offsetBytes.toString(16) + " bytes")
   })



* STM32F4 boot
** Set 0x40013800 = 0x3
   Alias SRAM to 0x0000.


> flash banks
#0 : stm32f4x.flash (stm32f2x) at 0x00000000, size 0x00000000, buswidth 0, chipwidth 0
> help flash
flash
      NOR flash command group (command valid any time)
  flash bank bank_id driver_name base_address size_bytes chip_width_bytes
            bus_width_bytes target [driver_options ...]
        Define a new bank with the given name, using the specified NOR
        flash driver. (configuration command)

Unlocked flash with this:
  mww 0x40023C08 0x08192A3B; mww 0x40023C08 0x4C5D6E7F; mww 0x40023C14 0x0fffaaed
Then wrote it with this:
  flash write_image erase /home/alex/tmp/stm_demo.hex 0
Based on: https://community.arm.com/iot/embedded/b/embedded-blog/posts/unlocking-the-stm32f4-discovery-board-with-openocd

* STM32F4 discovery links
** http://www.st.com/en/microcontrollers/stm32f407vg.html
** http://www.st.com/en/evaluation-tools/stm32f4discovery.html

* Booting raspberry pi
** The current setup has a Raspberry Pi 2 with U-Boot on its microSD card, connected over its serial GPIO pins to a CP210x-based USB to serial adapter. I use U-Boot command to transfer an image over the serial connection and run it.
** Speed up serial transfers
   Blog post describing some of the changes
     http://fw.hardijzer.nl/?p=138
   USB serial adapter datasheet
     https://www.silabs.com/Support%20Documents/TechnicalDocs/CP2102-9.pdf
* Raspberry Pi bare metal
** http://www.valvers.com/open-software/raspberry-pi/step04-bare-metal-programming-in-c-pt4/
   https://github.com/BrianSidebotham/arm-tutorial-rpi/blob/master/part-5/armc-016/rpi-base.h
** https://github.com/rsta2/circle
   "A C++ bare metal environment for Raspberry Pi with USB"

** https://github.com/rsta2/uspi/
   Mechanical C port of rsta2/circle
** https://github.com/Chadderz121/csud
   Easy to read. Only supports control messages to HID devices.
** USB in a nutshell
   http://www.beyondlogic.org/usbnutshell/us\b1.shtml
** https://www.raspberrypi.org/forums/viewforum.php?f=72 -- bare metal rpi forum
** https://github.com/steve-bate/ChibiOS-RPi

** GPIO pins on Pi 2 https://i.stack.imgur.com/sVvsB.jpg

** Linux raspi
*** device tree files in linux/arch/arm/boot/dts
    bcm283x.dtsi:
    bcm2835-cprman @ 7e101000
      BCM2835 CPRMAN (clock manager for the "audio" domain)
    bcm2835-system-timer @ 7e003000
      driver at linux/drivers/clocksource/bcm2835_timer.c

    bcm2836.dtsi:
    armv7-timer
    bcm2836-l1-intc @ 0x40000000 (parent)
      driver at linux/drivers/irqchip/irq-bcm2836.c
      LOCAL_IRQ_PENDING register at base + 0x060 + 4 * cpu number
    bcm2836-armctrl-ic @ 0x7e00b200 (child)

* C data structures libraries

  Decision: I'm going to start using OpenBSD's tree.h
  Really simple integration: one .h file and one trivial dependency
  Well documented with an example
  Sensible interface
  Production quality

** Gnulib
   https://www.gnu.org/software/gnulib/
   External containers:
   https://www.gnu.org/software/gnulib/MODULES.html#ansic_ext_container
   Includes:
   - Array lists
   - Circular array lists
   - Linked lists
   - AVL tree
   - Red-black tree
   - Hash tables based on linked lists, avl trees, red-black trees

** OpenBSD queue.h and tree.h
   http://openbsd.su/src/sys/sys/queue.h
   http://www.openbsd.org/cgi-bin/man.cgi?query=queue
   http://openbsd.su/src/sys/sys/tree.h
   http://www.openbsd.org/cgi-bin/man.cgi?query=tree
** sglib
   http://sglib.sourceforge.net/
** gdsl
   http://home.gna.org/gdsl/
** "C Algorithms" library
   http://fragglet.github.io/c-algorithms/
   https://github.com/fragglet/c-algorithms
** Judy
   http://judy.sourceforge.net/
** Libgee
   https://wiki.gnome.org/Projects/Libgee
   https://valadoc.org/gee-0.8/index.htm
** uthash
   http://troydhanson.github.io/uthash/
** POSIX search.h
   https://linux.die.net/man/3/hsearch
   http://pubs.opengroup.org/onlinepubs/000095399/basedefs/search.h.html
** Forum posts on this
   http://stackoverflow.com/questions/668501/are-there-any-open-source-c-libraries-with-common-data-structures
   https://www.reddit.com/r/programming/comments/9ridg/surely_there_is_a_decent_container_data_structure/


** klib
   https://github.com/attractivechaos/klib
   No real documentation.
   Includes:
   - Vector
   - Hash
   - Btree
   - Linked list


* Make
** Makefiles that build into a subdirectory:
   http://make.mad-scientist.net/papers/multi-architecture-builds/
** Makefile Auto-Dependency Generation (advanced reference):
   http://make.mad-scientist.net/papers/advanced-auto-dependency-generation/
** GNU make: Generating Prerequisites Automatically (currently do more-or-less this with tweaks):
   https://www.gnu.org/software/make/manual/html_node/Automatic-Prerequisites.html
