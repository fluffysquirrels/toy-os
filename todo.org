* Bugs

* Features:
** User mode can wait for timers.
** User mode can read from / write to console in a preemptible way.
*** User mode syscall
*** Syscall handler needs to block?
**** No:
***** Set return data in thread
***** Leave thread state as ready
***** Return to scheduler, or ideally ask to re-schedule the caller
**** Yes:
***** Initialise transfer in hardware
***** Record transfer details including blocked thread_id
***** Set thread state to blocked including what blocked them
      (if only for debugging)
***** Return from syscall with thread blocked value
***** Later an interrupt is raised, the interrupt handler:
****** Reads transfer details
****** Copies data from hardware to user mode buffer
****** Sets syscall return value
****** Set thread state to ready
*** User mode thread is scheduled, returns from syscall with its data.
** Use a pattern for syscall returns: no such syscall, complete with value, blocked.
** fork
** Reclaim resources used by stopped threads. thread_t and stack for now.

* Nice features:
** Ready list for threads
** busy_loop and console_reader have a pathological condition where key presses
   show up slowly. It seems to happen when I type quickly.
   I speculate there is more than one byte in the UART FIFO, read is returning with
   the rx interrupt disabled, and busy_loop is then scheduled

   Possible fixes:
*** console_reader could be re-scheduled after its I/O completes
*** sys_read could try harder to fetch extra data before returning
*** Fairer scheduling might help prevent console_reader being starved as much
** Memory protection
*** Stack overflow detection
*** User-mode lockdown
** Dynamic allocation
** IPC
** Network I/O
** Disk I/O
** File system

* Nice:
** Set user thread return values with a function in syscalls
** Rename interrupt -> exception where appropriate, including interrupt_table -> exception_table
** Logging boilerplate reduction
*** printf style message formatting
*** include file location (function name, file name, line number) in message using a macro
*** include failed assert condition in message using a macro
** Extract UNUSED and memset to a util file
** Use macro constants to refer to processor modes
** Tests
** Generate .h file with #define THREAD_OFFSET_* calculated with offsetof
** Assert register contents in the busy loop of second()
